{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Implementation of cw20 receive msg",
      "type": "object",
      "required": ["receive"],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update contract config (only owner can call)",
      "type": "object",
      "required": ["update_config"],
      "properties": {
        "update_config": {
          "type": "object",
          "required": ["config"],
          "properties": {
            "config": {
              "$ref": "#/definitions/ConfigParams"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Initialize an asset on the money market (only owner can call)",
      "type": "object",
      "required": ["init_asset"],
      "properties": {
        "init_asset": {
          "type": "object",
          "required": ["asset", "asset_params"],
          "properties": {
            "asset": {
              "description": "Asset enum",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "asset_params": {
              "description": "Parameters for asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetParams"
                }
              ]
            },
            "asset_symbol": {
              "description": "Symbol to be used for cw20 Token name and description of asset",
              "type": ["string", "null"]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callback sent from pToken contract after instantiated",
      "type": "object",
      "required": ["__init_asset_token_callback"],
      "properties": {
        "__init_asset_token_callback": {
          "type": "object",
          "required": ["reference"],
          "properties": {
            "reference": {
              "description": "Either the denom for a native asset or address for a cw20 token in bytes",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update an asset on the money market (only owner can call)",
      "type": "object",
      "required": ["update_asset"],
      "properties": {
        "update_asset": {
          "type": "object",
          "required": ["asset", "asset_params"],
          "properties": {
            "asset": {
              "description": "Asset related info",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "asset_params": {
              "description": "Asset parameters",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetParams"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit native coins. Deposited coins must be sent in the transaction this call is made",
      "type": "object",
      "required": ["deposit_native"],
      "properties": {
        "deposit_native": {
          "type": "object",
          "required": ["denom"],
          "properties": {
            "denom": {
              "description": "Denom used",
              "type": "string"
            },
            "on_behalf_of": {
              "description": "Address that will receive the pTokens",
              "type": ["string", "null"]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw an amount of the asset burning an equivalent amount of pTokens.",
      "type": "object",
      "required": ["withdraw"],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": ["asset"],
          "properties": {
            "amount": {
              "description": "Amount to be withdrawn. If None is specified, the full pToken balance will be burned in exchange for the equivalent asset amount.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "asset": {
              "description": "Asset to withdraw",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Borrow native coins. If borrow allowed, amount is added to caller's debt and sent to the address. If asset is a native token, the amount sent is selected so that the sum of the transfered amount plus the stability tax payed is equal to the borrowed amount.",
      "type": "object",
      "required": ["borrow"],
      "properties": {
        "borrow": {
          "type": "object",
          "required": ["amount", "asset"],
          "properties": {
            "amount": {
              "description": "Amount to borrow",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "asset": {
              "description": "Asset to borrow",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "recipient": {
              "description": "The address where the borrowed amount is sent",
              "type": ["string", "null"]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Repay native coins loan. Coins used to repay must be sent in the transaction this call is made.",
      "type": "object",
      "required": ["repay_native"],
      "properties": {
        "repay_native": {
          "type": "object",
          "required": ["denom"],
          "properties": {
            "denom": {
              "description": "Native denom",
              "type": "string"
            },
            "on_behalf_of": {
              "description": "Repay the funds for the user",
              "type": ["string", "null"]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Asset": {
      "description": "Represents either a native asset or a cw20. Meant to be used as part of a msg in a contract call and not to be used internally",
      "oneOf": [
        {
          "type": "object",
          "required": ["cw20"],
          "properties": {
            "cw20": {
              "type": "object",
              "required": ["contract_addr"],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["native"],
          "properties": {
            "native": {
              "type": "object",
              "required": ["denom"],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetParams": {
      "type": "object",
      "properties": {
        "active": {
          "description": "Enable or disable any action including deposit/withdraw/borrow/repay/liquidate",
          "type": ["boolean", "null"]
        },
        "borrow_enabled": {
          "description": "Enable or disable borrow",
          "type": ["boolean", "null"]
        },
        "deposit_enabled": {
          "description": "Enable or disable deposit",
          "type": ["boolean", "null"]
        },
        "initial_borrow_rate": {
          "description": "Initial borrow rate",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "interest_rate_model_params": {
          "description": "Interest rate model and parameters",
          "anyOf": [
            {
              "$ref": "#/definitions/InterestRateModelParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidation_bonus": {
          "description": "Bonus amount of collateral liquidator",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidation_threshold": {
          "description": "The amount if surpassed makes the user's position liquidatable.",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_loan_to_value": {
          "description": "Maximum borrowable amount as percentage of collateral",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "reserve_factor": {
          "description": "Part of borrow rate to be used as protocol rewards",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ConfigParams": {
      "type": "object",
      "properties": {
        "owner": {
          "description": "Owner address for config update",
          "type": ["string", "null"]
        },
        "protocol_admin": {
          "description": "Protocol admin address (admin for all the contracts)",
          "type": ["string", "null"]
        },
        "protocol_rewards_collector_address": {
          "description": "Address to collect protocol fees",
          "type": ["string", "null"]
        },
        "ptoken_code_id": {
          "description": "ptoken cw20 code id",
          "type": ["integer", "null"],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": ["amount", "msg", "sender"],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "InterestRateModelParams": {
      "oneOf": [
        {
          "type": "object",
          "required": ["linear"],
          "properties": {
            "linear": {
              "$ref": "#/definitions/LinearInterestRateModelParams"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LinearInterestRateModelParams": {
      "description": "Linear interest rate model",
      "type": "object",
      "required": ["base", "optimal_utilization_rate", "slope_1", "slope_2"],
      "properties": {
        "base": {
          "description": "Base rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "optimal_utilization_rate": {
          "description": "Optimal utilization rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slope_1": {
          "description": "Slope parameter for interest rate model function when utilization_rate < optimal_utilization_rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "slope_2": {
          "description": "Slope parameter for interest rate model function when utilization_rate >= optimal_utilization_rate",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
