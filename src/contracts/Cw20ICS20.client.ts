/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
  AllAccountsResponse,
  Uint128,
  Expiration,
  Timestamp,
  Uint64,
  AllAllowancesResponse,
  AllowanceInfo,
  AllowanceResponse,
  BalanceResponse,
  Amount,
  ChannelResponse,
  Coin,
  Cw20Coin,
  ChannelInfo,
  IbcEndpoint,
  Cw20ExecuteMsg,
  Binary,
  Logo,
  EmbeddedLogo,
  Cw20QueryMsg,
  Cw20ReceiveMsg,
  DownloadLogoResponse,
  ExecuteMsg,
  TransferMsg,
  AllowMsg,
  InitMsg,
  ListChannelsResponse,
  LogoInfo,
  Addr,
  MarketingInfoResponse,
  MinterResponse,
  PortResponse,
  QueryMsg,
  TokenInfoResponse,
} from "./Cw20ICS20.types";
export interface Cw20ICS20ReadOnlyInterface {
  contractAddress: string;
  port: () => Promise<PortResponse>;
  listChannels: () => Promise<ListChannelsResponse>;
  channel: ({ id }: { id: string }) => Promise<ChannelResponse>;
  config: () => Promise<any>;
  admin: () => Promise<any>;
  allowed: ({ contract }: { contract: string }) => Promise<any>;
  listAllowed: ({ limit, startAfter }: { limit?: number; startAfter?: string }) => Promise<any>;
}
export class Cw20ICS20QueryClient implements Cw20ICS20ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.port = this.port.bind(this);
    this.listChannels = this.listChannels.bind(this);
    this.channel = this.channel.bind(this);
    this.config = this.config.bind(this);
    this.admin = this.admin.bind(this);
    this.allowed = this.allowed.bind(this);
    this.listAllowed = this.listAllowed.bind(this);
  }

  port = async (): Promise<PortResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      port: {},
    });
  };
  listChannels = async (): Promise<ListChannelsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_channels: {},
    });
  };
  channel = async ({ id }: { id: string }): Promise<ChannelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel: {
        id,
      },
    });
  };
  config = async (): Promise<any> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    });
  };
  admin = async (): Promise<any> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {},
    });
  };
  allowed = async ({ contract }: { contract: string }): Promise<any> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allowed: {
        contract,
      },
    });
  };
  listAllowed = async ({ limit, startAfter }: { limit?: number; startAfter?: string }): Promise<any> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_allowed: {
        limit,
        start_after: startAfter,
      },
    });
  };
}
export interface Cw20ICS20Interface extends Cw20ICS20ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  transfer: (
    {
      channel,
      remoteAddress,
      timeout,
    }: {
      channel: string;
      remoteAddress: string;
      timeout?: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  allow: (
    {
      contract,
      gasLimit,
    }: {
      contract: string;
      gasLimit?: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateAdmin: (
    {
      admin,
    }: {
      admin: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
}
export class Cw20ICS20Client extends Cw20ICS20QueryClient implements Cw20ICS20Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.transfer = this.transfer.bind(this);
    this.allow = this.allow.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
  }

  receive = async (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        receive: {
          amount,
          msg,
          sender,
        },
      },
      fee,
      memo,
      funds,
    );
  };
  transfer = async (
    {
      channel,
      remoteAddress,
      timeout,
    }: {
      channel: string;
      remoteAddress: string;
      timeout?: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        transfer: {
          channel,
          remote_address: remoteAddress,
          timeout,
        },
      },
      fee,
      memo,
      funds,
    );
  };
  allow = async (
    {
      contract,
      gasLimit,
    }: {
      contract: string;
      gasLimit?: number;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        allow: {
          contract,
          gas_limit: gasLimit,
        },
      },
      fee,
      memo,
      funds,
    );
  };
  updateAdmin = async (
    {
      admin,
    }: {
      admin: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_admin: {
          admin,
        },
      },
      fee,
      memo,
      funds,
    );
  };
}
