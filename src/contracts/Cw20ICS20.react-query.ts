/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
  AllAccountsResponse,
  Uint128,
  Expiration,
  Timestamp,
  Uint64,
  AllAllowancesResponse,
  AllowanceInfo,
  AllowanceResponse,
  BalanceResponse,
  Amount,
  ChannelResponse,
  Coin,
  Cw20Coin,
  ChannelInfo,
  IbcEndpoint,
  Cw20ExecuteMsg,
  Binary,
  Logo,
  EmbeddedLogo,
  Cw20QueryMsg,
  Cw20ReceiveMsg,
  DownloadLogoResponse,
  ExecuteMsg,
  TransferMsg,
  AllowMsg,
  InitMsg,
  ListChannelsResponse,
  LogoInfo,
  Addr,
  MarketingInfoResponse,
  MinterResponse,
  PortResponse,
  QueryMsg,
  TokenInfoResponse,
} from "./Cw20ICS20.types";
import { Cw20ICS20QueryClient, Cw20ICS20Client } from "./Cw20ICS20.client";
export const cw20ICS20QueryKeys = {
  contract: [
    {
      contract: "cw20ICS20",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...cw20ICS20QueryKeys.contract[0], address: contractAddress }] as const,
  port: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "port", args }] as const,
  listChannels: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "list_channels", args }] as const,
  channel: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "channel", args }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "config", args }] as const,
  admin: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "admin", args }] as const,
  allowed: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "allowed", args }] as const,
  listAllowed: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw20ICS20QueryKeys.address(contractAddress)[0], method: "list_allowed", args }] as const,
};
export interface Cw20ICS20ReactQuery<TResponse, TData = TResponse> {
  client: Cw20ICS20QueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw20ICS20ListAllowedQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw20ICS20ListAllowedQuery<TData = any>({
  client,
  args,
  options,
}: Cw20ICS20ListAllowedQuery<TData>) {
  return useQuery<any, Error, TData>(
    cw20ICS20QueryKeys.listAllowed(client?.contractAddress, args),
    () =>
      client
        ? client.listAllowed({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error("Invalid client")),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20AllowedQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {
  args: {
    contract: string;
  };
}
export function useCw20ICS20AllowedQuery<TData = any>({
  client,
  args,
  options,
}: Cw20ICS20AllowedQuery<TData>) {
  return useQuery<any, Error, TData>(
    cw20ICS20QueryKeys.allowed(client?.contractAddress, args),
    () =>
      client
        ? client.allowed({
            contract: args.contract,
          })
        : Promise.reject(new Error("Invalid client")),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20AdminQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {}
export function useCw20ICS20AdminQuery<TData = any>({ client, options }: Cw20ICS20AdminQuery<TData>) {
  return useQuery<any, Error, TData>(
    cw20ICS20QueryKeys.admin(client?.contractAddress),
    () => (client ? client.admin() : Promise.reject(new Error("Invalid client"))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20ConfigQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {}
export function useCw20ICS20ConfigQuery<TData = any>({ client, options }: Cw20ICS20ConfigQuery<TData>) {
  return useQuery<any, Error, TData>(
    cw20ICS20QueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error("Invalid client"))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20ChannelQuery<TData> extends Cw20ICS20ReactQuery<ChannelResponse, TData> {
  args: {
    id: string;
  };
}
export function useCw20ICS20ChannelQuery<TData = ChannelResponse>({
  client,
  args,
  options,
}: Cw20ICS20ChannelQuery<TData>) {
  return useQuery<ChannelResponse, Error, TData>(
    cw20ICS20QueryKeys.channel(client?.contractAddress, args),
    () =>
      client
        ? client.channel({
            id: args.id,
          })
        : Promise.reject(new Error("Invalid client")),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20ListChannelsQuery<TData> extends Cw20ICS20ReactQuery<ListChannelsResponse, TData> {}
export function useCw20ICS20ListChannelsQuery<TData = ListChannelsResponse>({
  client,
  options,
}: Cw20ICS20ListChannelsQuery<TData>) {
  return useQuery<ListChannelsResponse, Error, TData>(
    cw20ICS20QueryKeys.listChannels(client?.contractAddress),
    () => (client ? client.listChannels() : Promise.reject(new Error("Invalid client"))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20PortQuery<TData> extends Cw20ICS20ReactQuery<PortResponse, TData> {}
export function useCw20ICS20PortQuery<TData = PortResponse>({ client, options }: Cw20ICS20PortQuery<TData>) {
  return useQuery<PortResponse, Error, TData>(
    cw20ICS20QueryKeys.port(client?.contractAddress),
    () => (client ? client.port() : Promise.reject(new Error("Invalid client"))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) },
  );
}
export interface Cw20ICS20UpdateAdminMutation {
  client: Cw20ICS20Client;
  msg: {
    admin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20ICS20UpdateAdminMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20UpdateAdminMutation>, "mutationFn">,
) {
  return useMutation<ExecuteResult, Error, Cw20ICS20UpdateAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAdmin(msg, fee, memo, funds),
    options,
  );
}
export interface Cw20ICS20AllowMutation {
  client: Cw20ICS20Client;
  msg: AllowMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20ICS20AllowMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20AllowMutation>, "mutationFn">,
) {
  return useMutation<ExecuteResult, Error, Cw20ICS20AllowMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.allow(msg, fee, memo, funds),
    options,
  );
}
export interface Cw20ICS20TransferMutation {
  client: Cw20ICS20Client;
  msg: TransferMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20ICS20TransferMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20TransferMutation>, "mutationFn">,
) {
  return useMutation<ExecuteResult, Error, Cw20ICS20TransferMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.transfer(msg, fee, memo, funds),
    options,
  );
}
export interface Cw20ICS20ReceiveMutation {
  client: Cw20ICS20Client;
  msg: Cw20ReceiveMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20ICS20ReceiveMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20ReceiveMutation>, "mutationFn">,
) {
  return useMutation<ExecuteResult, Error, Cw20ICS20ReceiveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds),
    options,
  );
}
