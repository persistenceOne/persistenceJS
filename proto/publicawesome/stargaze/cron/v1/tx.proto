syntax = "proto3";
package publicawesome.stargaze.cron.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "publicawesome/stargaze/cron/v1/cron.proto";

option go_package = "github.com/public-awesome/stargaze/v13/x/cron/types";

// Msg defines the alloc Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // PromoteToPrivilegedContract promotes a contract to privileged status.
  rpc PromoteToPrivilegedContract(MsgPromoteToPrivilegedContract)
      returns (MsgPromoteToPrivilegedContractResponse);

  // DemoteFromPrivilegedContract demotes a contract from privileged status.
  rpc DemoteFromPrivilegedContract(MsgDemoteFromPrivilegedContract)
      returns (MsgDemoteFromPrivilegedContractResponse);

  // UpdateParams updates the cron module's parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgPromoteToPrivilegedContract defines the Msg/PromoteToPrivilegedContract
message MsgPromoteToPrivilegedContract {
  option (cosmos.msg.v1.signer) = "authority";
  // Authority is the address of the governance account or any whitelisted
  // address
  string authority = 1;
  // Contract is the bech32 address of the smart contract
  string contract = 2;
}

message MsgPromoteToPrivilegedContractResponse {}

message MsgDemoteFromPrivilegedContract {
  option (cosmos.msg.v1.signer) = "authority";
  // Authority is the address of the governance account or any whitelisted
  // address
  string authority = 1;
  // Contract is the bech32 address of the smart contract
  string contract = 2;
}

message MsgDemoteFromPrivilegedContractResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  // Authority is the address of the governance account.
  string authority = 1;
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.jsontag) = "params,omitempty",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateParamsResponse {}
