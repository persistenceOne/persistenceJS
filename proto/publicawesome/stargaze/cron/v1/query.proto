syntax = "proto3";
package publicawesome.stargaze.cron.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "publicawesome/stargaze/cron/v1/cron.proto";

option go_package = "github.com/public-awesome/stargaze/v13/x/cron/types";

// Query defines the gRPC querier service.
service Query {
  // ListPrivileged queries the contracts which have the priviledge status
  rpc ListPrivileged(QueryListPrivilegedRequest) returns (QueryListPrivilegedResponse) {
    option (google.api.http).get = "/stargaze/cron/v1/list-privileged";
  }

  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/stargaze/cron/v1/params";
  }
}

// QueryListPrivilegedRequest is request type for the Query/ListPrivileged RPC
// method.
message QueryListPrivilegedRequest {}

// QueryListPrivilegedResponse is response type for the Query/ListPrivileged RPC
// method.
message QueryListPrivilegedResponse {
  // contract_addresses holds all the smart contract addresses which have
  // privilege status.
  repeated string contract_addresses = 1 [(gogoproto.jsontag) = "privileged_contract_addresses,omitempty"];
}

// QueryParamsRequest is request type for the Query/Params RPC
// method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC
// method.
message QueryParamsResponse {
  Params params = 1 [
    (gogoproto.jsontag) = "params,omitempty",
    (gogoproto.nullable) = false
  ];
}
