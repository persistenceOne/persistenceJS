syntax = "proto3";
package publicawesome.stargaze.globalfee.v1;

import "google/api/annotations.proto";
import "publicawesome/stargaze/globalfee/v1/globalfee.proto";

option go_package = "github.com/public-awesome/stargaze/v13/x/globalfee/types";

// Query defines the gRPC querier service.
service Query {
  rpc CodeAuthorization(QueryCodeAuthorizationRequest)
      returns (QueryCodeAuthorizationResponse) {
    option (google.api.http).get =
        "/stargaze/globalfee/v1/code_authorization/{code_id}";
  }
  rpc ContractAuthorization(QueryContractAuthorizationRequest)
      returns (QueryContractAuthorizationResponse) {
    option (google.api.http).get =
        "/stargaze/globalfee/v1/contract_authorization/{contract_address}";
  }
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/stargaze/globalfee/v1/params";
  }
  rpc Authorizations(QueryAuthorizationsRequest)
      returns (QueryAuthorizationsResponse) {
    option (google.api.http).get = "/stargaze/globalfee/v1/authorizations";
  }
}

message QueryCodeAuthorizationRequest { uint64 code_id = 1; }

message QueryCodeAuthorizationResponse { repeated string methods = 1; }

message QueryContractAuthorizationRequest { string contract_address = 1; }

message QueryContractAuthorizationResponse { repeated string methods = 1; }

message QueryParamsRequest {}

message QueryParamsResponse { Params params = 1; }

message QueryAuthorizationsRequest {}

message QueryAuthorizationsResponse {
  repeated CodeAuthorization code_authorizations = 1;
  repeated ContractAuthorization contract_authorizations = 2;
}
