syntax = "proto3";
package publicawesome.stargaze.globalfee.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "publicawesome/stargaze/globalfee/v1/globalfee.proto";

option go_package = "github.com/public-awesome/stargaze/v13/x/globalfee/types";

// Msg defines the alloc Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  rpc SetCodeAuthorization(MsgSetCodeAuthorization)
      returns (MsgSetCodeAuthorizationResponse);

  rpc RemoveCodeAuthorization(MsgRemoveCodeAuthorization)
      returns (MsgRemoveCodeAuthorizationResponse);

  rpc SetContractAuthorization(MsgSetContractAuthorization)
      returns (MsgSetContractAuthorizationResponse);

  rpc RemoveContractAuthorization(MsgRemoveContractAuthorization)
      returns (MsgRemoveContractAuthorizationResponse);

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

message MsgSetCodeAuthorization {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  CodeAuthorization code_authorization = 2;
}

message MsgSetCodeAuthorizationResponse {}

message MsgRemoveCodeAuthorization {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  uint64 code_id = 2 [ (gogoproto.customname) = "CodeID" ];
}

message MsgRemoveCodeAuthorizationResponse {}

message MsgSetContractAuthorization {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  ContractAuthorization contract_authorization = 2;
}

message MsgSetContractAuthorizationResponse {}

message MsgRemoveContractAuthorization {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  string contract_address = 2;
}

message MsgRemoveContractAuthorizationResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "sender";
  string sender = 1;
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.jsontag) = "params,omitempty",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateParamsResponse {}
