/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions } from "@tanstack/react-query";
import {
  AllAccountsResponse,
  AllAllowancesResponse,
  AllowanceResponse,
  BalanceResponse,
  DownloadLogoResponse,
  MinterResponse,
  MarketingInfoResponse,
  TokenInfoResponse,
} from "./Cw20.types";
import { Cw20QueryClient } from "./Cw20.client";
export declare const cw20QueryKeys: {
  contract: readonly [
    {
      readonly contract: "cw20";
    },
  ];
  address: (contractAddress: string | undefined) => readonly [
    {
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  balance: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "balance";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  tokenInfo: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "token_info";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  minter: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "minter";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  allowance: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "allowance";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  allAllowances: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "all_allowances";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  allAccounts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "all_accounts";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  marketingInfo: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "marketing_info";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
  downloadLogo: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "download_logo";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20";
    },
  ];
};
export interface Cw20ReactQuery<TResponse, TData = TResponse> {
  client: Cw20QueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw20DownloadLogoQuery<TData> extends Cw20ReactQuery<DownloadLogoResponse, TData> {}
export declare function useCw20DownloadLogoQuery<TData = DownloadLogoResponse>({
  client,
  options,
}: Cw20DownloadLogoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20MarketingInfoQuery<TData> extends Cw20ReactQuery<MarketingInfoResponse, TData> {}
export declare function useCw20MarketingInfoQuery<TData = MarketingInfoResponse>({
  client,
  options,
}: Cw20MarketingInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20AllAccountsQuery<TData> extends Cw20ReactQuery<AllAccountsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export declare function useCw20AllAccountsQuery<TData = AllAccountsResponse>({
  client,
  args,
  options,
}: Cw20AllAccountsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20AllAllowancesQuery<TData> extends Cw20ReactQuery<AllAllowancesResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export declare function useCw20AllAllowancesQuery<TData = AllAllowancesResponse>({
  client,
  args,
  options,
}: Cw20AllAllowancesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20AllowanceQuery<TData> extends Cw20ReactQuery<AllowanceResponse, TData> {
  args: {
    owner: string;
    spender: string;
  };
}
export declare function useCw20AllowanceQuery<TData = AllowanceResponse>({
  client,
  args,
  options,
}: Cw20AllowanceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20MinterQuery<TData> extends Cw20ReactQuery<MinterResponse, TData> {}
export declare function useCw20MinterQuery<TData = MinterResponse>({
  client,
  options,
}: Cw20MinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20TokenInfoQuery<TData> extends Cw20ReactQuery<TokenInfoResponse, TData> {}
export declare function useCw20TokenInfoQuery<TData = TokenInfoResponse>({
  client,
  options,
}: Cw20TokenInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20BalanceQuery<TData> extends Cw20ReactQuery<BalanceResponse, TData> {
  args: {
    address: string;
  };
}
export declare function useCw20BalanceQuery<TData = BalanceResponse>({
  client,
  args,
  options,
}: Cw20BalanceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
