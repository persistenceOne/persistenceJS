/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
  Uint128,
  ChannelResponse,
  Coin,
  Binary,
  ListChannelsResponse,
  PortResponse,
} from "./Cw20ICS20.types";
export interface Cw20ICS20ReadOnlyInterface {
  contractAddress: string;
  port: () => Promise<PortResponse>;
  listChannels: () => Promise<ListChannelsResponse>;
  channel: ({ id }: { id: string }) => Promise<ChannelResponse>;
  config: () => Promise<any>;
  admin: () => Promise<any>;
  allowed: ({ contract }: { contract: string }) => Promise<any>;
  listAllowed: ({ limit, startAfter }: { limit?: number; startAfter?: string }) => Promise<any>;
}
export declare class Cw20ICS20QueryClient implements Cw20ICS20ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string);
  port: () => Promise<PortResponse>;
  listChannels: () => Promise<ListChannelsResponse>;
  channel: ({ id }: { id: string }) => Promise<ChannelResponse>;
  config: () => Promise<any>;
  admin: () => Promise<any>;
  allowed: ({ contract }: { contract: string }) => Promise<any>;
  listAllowed: ({ limit, startAfter }: { limit?: number; startAfter?: string }) => Promise<any>;
}
export interface Cw20ICS20Interface extends Cw20ICS20ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  transfer: (
    {
      channel,
      remoteAddress,
      timeout,
    }: {
      channel: string;
      remoteAddress: string;
      timeout?: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  allow: (
    {
      contract,
      gasLimit,
    }: {
      contract: string;
      gasLimit?: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateAdmin: (
    {
      admin,
    }: {
      admin: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
}
export declare class Cw20ICS20Client extends Cw20ICS20QueryClient implements Cw20ICS20Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128;
      msg: Binary;
      sender: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  transfer: (
    {
      channel,
      remoteAddress,
      timeout,
    }: {
      channel: string;
      remoteAddress: string;
      timeout?: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  allow: (
    {
      contract,
      gasLimit,
    }: {
      contract: string;
      gasLimit?: number;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
  updateAdmin: (
    {
      admin,
    }: {
      admin: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[],
  ) => Promise<ExecuteResult>;
}
