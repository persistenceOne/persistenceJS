/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {
  ChannelResponse,
  Coin,
  Cw20ReceiveMsg,
  TransferMsg,
  AllowMsg,
  ListChannelsResponse,
  PortResponse,
} from "./Cw20ICS20.types";
import { Cw20ICS20QueryClient, Cw20ICS20Client } from "./Cw20ICS20.client";
export declare const cw20ICS20QueryKeys: {
  contract: readonly [
    {
      readonly contract: "cw20ICS20";
    },
  ];
  address: (contractAddress: string | undefined) => readonly [
    {
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  port: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "port";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  listChannels: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "list_channels";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  channel: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "channel";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "config";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  admin: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "admin";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  allowed: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "allowed";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
  listAllowed: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) => readonly [
    {
      readonly method: "list_allowed";
      readonly args: Record<string, unknown>;
      readonly address: string;
      readonly contract: "cw20ICS20";
    },
  ];
};
export interface Cw20ICS20ReactQuery<TResponse, TData = TResponse> {
  client: Cw20ICS20QueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw20ICS20ListAllowedQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export declare function useCw20ICS20ListAllowedQuery<TData = any>({
  client,
  args,
  options,
}: Cw20ICS20ListAllowedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20AllowedQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {
  args: {
    contract: string;
  };
}
export declare function useCw20ICS20AllowedQuery<TData = any>({
  client,
  args,
  options,
}: Cw20ICS20AllowedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20AdminQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {}
export declare function useCw20ICS20AdminQuery<TData = any>({
  client,
  options,
}: Cw20ICS20AdminQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20ConfigQuery<TData> extends Cw20ICS20ReactQuery<any, TData> {}
export declare function useCw20ICS20ConfigQuery<TData = any>({
  client,
  options,
}: Cw20ICS20ConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20ChannelQuery<TData> extends Cw20ICS20ReactQuery<ChannelResponse, TData> {
  args: {
    id: string;
  };
}
export declare function useCw20ICS20ChannelQuery<TData = ChannelResponse>({
  client,
  args,
  options,
}: Cw20ICS20ChannelQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20ListChannelsQuery<TData> extends Cw20ICS20ReactQuery<ListChannelsResponse, TData> {}
export declare function useCw20ICS20ListChannelsQuery<TData = ListChannelsResponse>({
  client,
  options,
}: Cw20ICS20ListChannelsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20PortQuery<TData> extends Cw20ICS20ReactQuery<PortResponse, TData> {}
export declare function useCw20ICS20PortQuery<TData = PortResponse>({
  client,
  options,
}: Cw20ICS20PortQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20ICS20UpdateAdminMutation {
  client: Cw20ICS20Client;
  msg: {
    admin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export declare function useCw20ICS20UpdateAdminMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20UpdateAdminMutation>, "mutationFn">,
): import("@tanstack/react-query").UseMutationResult<
  ExecuteResult,
  Error,
  Cw20ICS20UpdateAdminMutation,
  unknown
>;
export interface Cw20ICS20AllowMutation {
  client: Cw20ICS20Client;
  msg: AllowMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export declare function useCw20ICS20AllowMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20AllowMutation>, "mutationFn">,
): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20ICS20AllowMutation, unknown>;
export interface Cw20ICS20TransferMutation {
  client: Cw20ICS20Client;
  msg: TransferMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export declare function useCw20ICS20TransferMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20TransferMutation>, "mutationFn">,
): import("@tanstack/react-query").UseMutationResult<
  ExecuteResult,
  Error,
  Cw20ICS20TransferMutation,
  unknown
>;
export interface Cw20ICS20ReceiveMutation {
  client: Cw20ICS20Client;
  msg: Cw20ReceiveMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export declare function useCw20ICS20ReceiveMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20ICS20ReceiveMutation>, "mutationFn">,
): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20ICS20ReceiveMutation, unknown>;
