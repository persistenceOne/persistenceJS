/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import * as _0 from "./Cw20.types";
import * as _1 from "./Cw20.client";
import * as _2 from "./Cw20.react-query";
import * as _3 from "./Cw20ICS20.types";
import * as _4 from "./Cw20ICS20.client";
import * as _5 from "./Cw20ICS20.react-query";
export declare namespace contracts {
  const Cw20: {
    useCw20DownloadLogoQuery<TData = _0.DownloadLogoResponse>({
      client,
      options,
    }: _2.Cw20DownloadLogoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
    useCw20MarketingInfoQuery<TData_1 = _0.MarketingInfoResponse>({
      client,
      options,
    }: _2.Cw20MarketingInfoQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
    useCw20AllAccountsQuery<TData_2 = _0.AllAccountsResponse>({
      client,
      args,
      options,
    }: _2.Cw20AllAccountsQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
    useCw20AllAllowancesQuery<TData_3 = _0.AllAllowancesResponse>({
      client,
      args,
      options,
    }: _2.Cw20AllAllowancesQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
    useCw20AllowanceQuery<TData_4 = _0.AllowanceResponse>({
      client,
      args,
      options,
    }: _2.Cw20AllowanceQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
    useCw20MinterQuery<TData_5 = _0.MinterResponse>({
      client,
      options,
    }: _2.Cw20MinterQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<TData_5, Error>;
    useCw20TokenInfoQuery<TData_6 = _0.TokenInfoResponse>({
      client,
      options,
    }: _2.Cw20TokenInfoQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
    useCw20BalanceQuery<TData_7 = _0.BalanceResponse>({
      client,
      args,
      options,
    }: _2.Cw20BalanceQuery<TData_7>): import("@tanstack/react-query").UseQueryResult<TData_7, Error>;
    cw20QueryKeys: {
      contract: readonly [
        {
          readonly contract: "cw20";
        },
      ];
      address: (contractAddress: string) => readonly [
        {
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      balance: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "balance";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      tokenInfo: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "token_info";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      minter: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "minter";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      allowance: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "allowance";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      allAllowances: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "all_allowances";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      allAccounts: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "all_accounts";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      marketingInfo: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "marketing_info";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
      downloadLogo: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "download_logo";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20";
        },
      ];
    };
    Cw20QueryClient: typeof _1.Cw20QueryClient;
  };
  const Cw20ICS20: {
    useCw20ICS20ListAllowedQuery<TData = any>({
      client,
      args,
      options,
    }: _5.Cw20ICS20ListAllowedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
    useCw20ICS20AllowedQuery<TData_1 = any>({
      client,
      args,
      options,
    }: _5.Cw20ICS20AllowedQuery<TData_1>): import("@tanstack/react-query").UseQueryResult<TData_1, Error>;
    useCw20ICS20AdminQuery<TData_2 = any>({
      client,
      options,
    }: _5.Cw20ICS20AdminQuery<TData_2>): import("@tanstack/react-query").UseQueryResult<TData_2, Error>;
    useCw20ICS20ConfigQuery<TData_3 = any>({
      client,
      options,
    }: _5.Cw20ICS20ConfigQuery<TData_3>): import("@tanstack/react-query").UseQueryResult<TData_3, Error>;
    useCw20ICS20ChannelQuery<TData_4 = _3.ChannelResponse>({
      client,
      args,
      options,
    }: _5.Cw20ICS20ChannelQuery<TData_4>): import("@tanstack/react-query").UseQueryResult<TData_4, Error>;
    useCw20ICS20ListChannelsQuery<TData_5 = _3.ListChannelsResponse>({
      client,
      options,
    }: _5.Cw20ICS20ListChannelsQuery<TData_5>): import("@tanstack/react-query").UseQueryResult<
      TData_5,
      Error
    >;
    useCw20ICS20PortQuery<TData_6 = _3.PortResponse>({
      client,
      options,
    }: _5.Cw20ICS20PortQuery<TData_6>): import("@tanstack/react-query").UseQueryResult<TData_6, Error>;
    useCw20ICS20UpdateAdminMutation(
      options?: Omit<
        import("@tanstack/react-query").UseMutationOptions<
          import("@cosmjs/cosmwasm-stargate").ExecuteResult,
          Error,
          _5.Cw20ICS20UpdateAdminMutation,
          unknown
        >,
        "mutationFn"
      >,
    ): import("@tanstack/react-query").UseMutationResult<
      import("@cosmjs/cosmwasm-stargate").ExecuteResult,
      Error,
      _5.Cw20ICS20UpdateAdminMutation,
      unknown
    >;
    useCw20ICS20AllowMutation(
      options?: Omit<
        import("@tanstack/react-query").UseMutationOptions<
          import("@cosmjs/cosmwasm-stargate").ExecuteResult,
          Error,
          _5.Cw20ICS20AllowMutation,
          unknown
        >,
        "mutationFn"
      >,
    ): import("@tanstack/react-query").UseMutationResult<
      import("@cosmjs/cosmwasm-stargate").ExecuteResult,
      Error,
      _5.Cw20ICS20AllowMutation,
      unknown
    >;
    useCw20ICS20TransferMutation(
      options?: Omit<
        import("@tanstack/react-query").UseMutationOptions<
          import("@cosmjs/cosmwasm-stargate").ExecuteResult,
          Error,
          _5.Cw20ICS20TransferMutation,
          unknown
        >,
        "mutationFn"
      >,
    ): import("@tanstack/react-query").UseMutationResult<
      import("@cosmjs/cosmwasm-stargate").ExecuteResult,
      Error,
      _5.Cw20ICS20TransferMutation,
      unknown
    >;
    useCw20ICS20ReceiveMutation(
      options?: Omit<
        import("@tanstack/react-query").UseMutationOptions<
          import("@cosmjs/cosmwasm-stargate").ExecuteResult,
          Error,
          _5.Cw20ICS20ReceiveMutation,
          unknown
        >,
        "mutationFn"
      >,
    ): import("@tanstack/react-query").UseMutationResult<
      import("@cosmjs/cosmwasm-stargate").ExecuteResult,
      Error,
      _5.Cw20ICS20ReceiveMutation,
      unknown
    >;
    cw20ICS20QueryKeys: {
      contract: readonly [
        {
          readonly contract: "cw20ICS20";
        },
      ];
      address: (contractAddress: string) => readonly [
        {
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      port: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "port";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      listChannels: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "list_channels";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      channel: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "channel";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      config: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "config";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      admin: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "admin";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      allowed: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "allowed";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
      listAllowed: (
        contractAddress: string,
        args?: Record<string, unknown>,
      ) => readonly [
        {
          readonly method: "list_allowed";
          readonly args: Record<string, unknown>;
          readonly address: string;
          readonly contract: "cw20ICS20";
        },
      ];
    };
    Cw20ICS20QueryClient: typeof _4.Cw20ICS20QueryClient;
    Cw20ICS20Client: typeof _4.Cw20ICS20Client;
  };
}
