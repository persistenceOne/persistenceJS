/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.3.6.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export interface ConfigResponse {
    base_asset: string;
    owner: string;
    [k: string]: unknown;
}
export declare type ExecuteMsg = {
    update_config: {
        owner?: string | null;
        [k: string]: unknown;
    };
} | {
    register_feeder: {
        asset: string;
        feeder: string;
        [k: string]: unknown;
    };
} | {
    feed_price: {
        assets: string[];
        prices: Decimal256[];
        [k: string]: unknown;
    };
};
export declare type Decimal256 = string;
export interface FeederResponse {
    asset: string;
    feeder: string;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    base_asset: string;
    owner: string;
    [k: string]: unknown;
}
export interface PriceResponse {
    last_updated_base: number;
    last_updated_quote: number;
    rate: Decimal256;
    [k: string]: unknown;
}
export interface PricesResponse {
    prices: PricesResponseElem[];
    [k: string]: unknown;
}
export interface PricesResponseElem {
    asset: string;
    last_updated_time: number;
    price: Decimal256;
    [k: string]: unknown;
}
export declare type QueryMsg = {
    config: {
        [k: string]: unknown;
    };
} | {
    feeder: {
        asset: string;
        [k: string]: unknown;
    };
} | {
    price: {
        base: string;
        quote: string;
        [k: string]: unknown;
    };
} | {
    prices: {
        limit?: number | null;
        start_after?: string | null;
        [k: string]: unknown;
    };
};
export interface OracleReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    feeder: ({ asset }: {
        asset: string;
    }) => Promise<FeederResponse>;
    price: ({ base, quote }: {
        base: string;
        quote: string;
    }) => Promise<PriceResponse>;
    prices: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<PricesResponse>;
}
export declare class OracleQueryClient implements OracleReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    feeder: ({ asset }: {
        asset: string;
    }) => Promise<FeederResponse>;
    price: ({ base, quote }: {
        base: string;
        quote: string;
    }) => Promise<PriceResponse>;
    prices: ({ limit, startAfter, }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<PricesResponse>;
}
export interface OracleInterface extends OracleReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateConfig: ({ owner, }: {
        owner?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    registerFeeder: ({ asset, feeder, }: {
        asset: string;
        feeder: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    feedPrice: ({ assets, prices, }: {
        assets: string[];
        prices: Decimal256[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class OracleClient extends OracleQueryClient implements OracleInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateConfig: ({ owner, }: {
        owner?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    registerFeeder: ({ asset, feeder, }: {
        asset: string;
        feeder: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    feedPrice: ({ assets, prices, }: {
        assets: string[];
        prices: Decimal256[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
